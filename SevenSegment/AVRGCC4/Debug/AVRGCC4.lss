
AVRGCC4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000000d2  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000002f  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001aa  00000000  00000000  00000903  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000141  00000000  00000000  00000aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e4  00000000  00000000  00000bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000020  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000110  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000024  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
		0b01110001 //F
};

int main(void)
{	
	DDRB = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<16;i++)
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB= segment_look_up[i];
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	31 e0       	ldi	r19, 0x01	; 1
{	
	DDRB = 0xFF;
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<16;i++)
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b0 e0       	ldi	r27, 0x00	; 0
		{
			PORTB= segment_look_up[i];
  a6:	f9 01       	movw	r30, r18
  a8:	e8 0f       	add	r30, r24
  aa:	f9 1f       	adc	r31, r25
  ac:	60 81       	ld	r22, Z
  ae:	65 b9       	out	0x05, r22	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	4f e9       	ldi	r20, 0x9F	; 159
  b2:	56 e8       	ldi	r21, 0x86	; 134
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	41 50       	subi	r20, 0x01	; 1
  b8:	50 40       	sbci	r21, 0x00	; 0
  ba:	60 40       	sbci	r22, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x20>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x2a>
  c0:	00 00       	nop
{	
	DDRB = 0xFF;
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<16;i++)
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	80 31       	cpi	r24, 0x10	; 16
  c6:	91 05       	cpc	r25, r1
  c8:	74 f3       	brlt	.-36     	; 0xa6 <main+0x10>
  ca:	cd 01       	movw	r24, r26
  cc:	ec cf       	rjmp	.-40     	; 0xa6 <main+0x10>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
