
AVRGCC3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000016d  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000104  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000204  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000100  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
	DDRB = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  88:	15 b8       	out	0x05, r1	; 5
	
    while(1)
    {
		
		for(int i=0;i<8;i++){
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
			PORTB |= 1<<i ;
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	70 e0       	ldi	r23, 0x00	; 0
			PORTB |= 128 >> i;
  92:	40 e8       	ldi	r20, 0x80	; 128
  94:	50 e0       	ldi	r21, 0x00	; 0
	PORTB = 0x00;
	
    while(1)
    {
		
		for(int i=0;i<8;i++){
  96:	e0 e0       	ldi	r30, 0x00	; 0
  98:	f0 e0       	ldi	r31, 0x00	; 0
			PORTB |= 1<<i ;
  9a:	a5 b1       	in	r26, 0x05	; 5
  9c:	9b 01       	movw	r18, r22
  9e:	08 2e       	mov	r0, r24
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x26>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <main+0x22>
  aa:	2a 2b       	or	r18, r26
  ac:	25 b9       	out	0x05, r18	; 5
			PORTB |= 128 >> i;
  ae:	a5 b1       	in	r26, 0x05	; 5
  b0:	9a 01       	movw	r18, r20
  b2:	08 2e       	mov	r0, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x3a>
  b6:	35 95       	asr	r19
  b8:	27 95       	ror	r18
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <main+0x36>
  be:	2a 2b       	or	r18, r26
  c0:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	0f e9       	ldi	r16, 0x9F	; 159
  c4:	16 e8       	ldi	r17, 0x86	; 134
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	01 50       	subi	r16, 0x01	; 1
  ca:	10 40       	sbci	r17, 0x00	; 0
  cc:	20 40       	sbci	r18, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x48>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
			_delay_ms(500);
			PORTB = 0x00;
  d4:	15 b8       	out	0x05, r1	; 5
	PORTB = 0x00;
	
    while(1)
    {
		
		for(int i=0;i<8;i++){
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	91 05       	cpc	r25, r1
  dc:	f4 f2       	brlt	.-68     	; 0x9a <main+0x1a>
  de:	cf 01       	movw	r24, r30
  e0:	dc cf       	rjmp	.-72     	; 0x9a <main+0x1a>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
